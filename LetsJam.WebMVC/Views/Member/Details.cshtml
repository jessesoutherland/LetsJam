@model LetsJam.Models.Member.MemberDetail

@{
    ViewBag.Title = "Details";
}

<h2>Details:</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.MemberId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.MemberId)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.FirstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.LastName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Email)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Email)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Phone)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Phone)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.IsStudent)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.IsStudent)
        </dd>
    </dl>
</div>

<hr />
<h3>Transactions:</h3>

<table class="table" id="toppers">
    @try
    {
        if (Model.Transactions.ElementAt(0) != null)
        {
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Transactions.ElementAt(0).TransactionId)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Transactions.ElementAt(0).ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Transactions.ElementAt(0).NumberOfProductPurchased)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Transactions.ElementAt(0).DateOfTransaction)
                </th>
            </tr>
        }

    }
    catch (Exception)
    {
        @Html.Raw("<p>There are no transactions to display.</p>")


    }

    @foreach (var prop in Model.Transactions)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => prop.TransactionId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => prop.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => prop.NumberOfProductPurchased)
            </td>
            <td>
                @Html.DisplayFor(modelItem => prop.DateOfTransaction)
            </td>
        </tr>
    }
</table>

<hr />
<h3>Enrollments:</h3>

<table class="table">
    @try
    {
        if (Model.Enrollments.ElementAt(0) != null)
        {
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Enrollments.ElementAt(0).Instrument)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Enrollments.ElementAt(0).DifficultyLevel)
                </th>
            </tr>
        }

    }
    catch (Exception)
    {
        @Html.Raw("<p>There are no enrollments to display.</p>")


    }

    @foreach (var prop in Model.Enrollments)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => prop.Instrument)
            </td>
            <td>
                @Html.DisplayFor(modelItem => prop.DifficultyLevel)
            </td>
        </tr>
    }
</table>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.MemberId }) |
    @Html.ActionLink("Back to List", "Index")
</p>
